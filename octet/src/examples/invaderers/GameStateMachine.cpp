#include "GameStateMachine.h"

#include <cassert>
#include "GameState.h"

using namespace octet;

GameStateMachine* GameStateMachine::s_instance = nullptr;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GameStateMachine* GameStateMachine::Instance()
{
	if (!s_instance)
	{
		s_instance = new GameStateMachine();
	}

	return s_instance;
}

GameStateMachine::GameStateMachine()
	: currentState(nullptr)
{
	assert(!s_instance); // it might assert in a multithreaded environment. Fix the singleton!
}

GameStateMachine::~GameStateMachine()
{
	Clear();
	s_instance = nullptr;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GameStateMachine::Clear()
{
	if (currentState)
	{
		currentState->Stop();

		delete currentState;
		currentState = nullptr;
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GameStateMachine::SetState(GameStateId gameStateId)
{
	Clear();

	currentState = new GameState();

	currentState->Start();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GameStateMachine::UpdateState()
{
	if (currentState)
	{
		currentState->Update();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GameStateMachine::RenderState()
{
	if (currentState)
	{
		currentState->Render();
	}
}