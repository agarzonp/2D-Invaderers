#include "GameStateMachine.h"

#include <cassert>
#include "GameState.h"

using namespace octet;

GameStateMachine* GameStateMachine::s_instance = nullptr;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

GameStateMachine* GameStateMachine::GetInstance()
{
	if (!s_instance)
	{
		s_instance = new GameStateMachine();
	}

	return s_instance;
}

GameStateMachine::GameStateMachine()
{
	assert(!s_instance); // it might assert in a multithreaded environment. Fix the singleton!
}

GameStateMachine::~GameStateMachine()
{
	Clear();
	s_instance = nullptr;
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GameStateMachine::Clear()
{
	if (states.size() > 0)
	{
		for (auto state : states)
		{
			state->Stop();
			delete state;
		}
		states.resize(0);
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GameStateMachine::SetState(GameStateId gameStateId)
{
	Clear();

	states.push_back(new GameState());

	states.back()->Start();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GameStateMachine::PushState(GameStateId gameStateId)
{
	if (states.size() > 0)
	{
		states.back()->Suspend();
	}

	states.push_back(new GameState());

	states.back()->Start();
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GameStateMachine::PopState()
{
	if (states.size() > 0)
	{
		states.back()->Stop();

		delete states.back();
		states.pop_back();
		
		states.back()->Resume();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GameStateMachine::UpdateState()
{
	if (states.size() > 0)
	{
		states.back()->Update();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

void GameStateMachine::RenderState()
{
	for (auto state : states)
	{
		state->Render();
	}
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////